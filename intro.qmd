---
title: "Introduction"
---
## 引言

在 R 语言中，可共享代码的基本单位是包 (packages)。包将代码、数据、文档和测试捆绑在一起，易于与他人共享。截至 2023 年 3 月，R 综合档案网络（**C**omprehensive **R** **A**rchive **N**etwork，简称 CRAN）上有超过 19000 个软件包可用。这些种类繁多的软件包是 R 如此成功的原因之一：很可能有人已经解决了你正在研究的问题，而你可以通过下载他们的软件包从他们的工作中获益。

如果你正在阅读本书，那么你已经知道如何通过以下方式使用软件包：

-   通过 CRAN 进行安装 `install.packages("x")`

-   通过 `library("x")` 或 `library(x)` 使用它们

-   通过 `package?x` 和 `help(package = "x")` 查询帮助

本书的目的是教你如何开发包，这样你就可以编写自己的包，而不仅仅是使用别人的软件包。为什么要编写软件包？一个令人信服的理由是，你有想与他人共享的代码。将代码打包成软件包，可以方便其他人使用，因为他们和你一样，已经知道如何使用软件包。如果将代码打包，任何 R 用户都可以轻松下载、安装并学习如何使用。

不过，即使你从不共享代码，包也是有用的。正如 Hilary Parker 在[介绍包](https://hilaryparker.com/2014/04/29/writing-an-r-package-from-scratch/)时所说的那样"说真的，使用包并不一定非要共享代码（虽然这也是一个额外的好处！）。它是为了节省自己的时间"。在软件包中组织代码能让你的生活更轻松，因为软件包自带约定俗成的规则。例如，R 代码放在 `R/`，测试放在 `tests/`，数据放在 `data/`。这些约定很有帮助，因为

-   它们节省时间\--你无需考虑组织项目的最佳方式，只需按照模板操作即可。

-   标准化的约定带来标准化的工具\--如果你遵循R包的规范，你就可以免费获得许多工具。

甚至还可以使用软件包来构建数据分析（Marwick, Boettiger, and Mullen ([2018a](https://r-pkgs.org/references.html#ref-marwick2018-tas)) or Marwick, Boettiger, and Mullen ([2018b](https://r-pkgs.org/references.html#ref-marwick2018-peerj))），不过我们不会在此深入探讨这一用例。

### 哲学

本书信奉我们的软件包开发理念：任何可以自动化的事情都应该自动化。尽可能减少手工操作。尽可能多地使用函数。我们的目标是把时间花在思考你想让软件包做什么上，而不是考虑软件包结构的细枝末节。

这一理念主要是通过 devtools 软件包来实现的，该软件包是一套 R 函数的公众形象，可自动执行常见的开发任务。2018 年 10 月发布的 2.0.0 版本标志着其内部重组为一组更聚焦的软件包，devtools 更像是一个元软件包 (meta-package)。usethis 包是你最有可能直接交互的子包；我们将在第 2.2 节解释 devtools 和 usethis 之间的关系。

一如既往，devtools 的目标是尽可能简化软件包开发。它囊括了 Hadley Wickham 开发的最佳实践，这些实践最初来自于他多年多产的个人开发经验。最近，他在 Posit（前身为 RStudio）组建了一支开发团队，他们共同管理着数百个开源 R 软件包，包括那些被称为 tidyverse 的软件包。这个团队的影响力使我们能够以非凡的规模探索所有可能的错误。幸运的是，这也为我们提供了机会，在专家和富有同情心的同事的陪伴下，对成功和失败进行反思。我们试图开发出让软件包的维护者和用户都能更愉快地使用软件包的方法。devtools 元软件包就是将这些经验具体化的地方。

devtools 与 RStudio 携手合作，我们认为 RStudio 是大多数 R 用户的最佳开发环境。目前，最流行的 RStudio 替代方案是启用了 R 扩展的 Visual Studio Code（VS Code）。这可能是一个有价值且功能强大的环境，但需要更多的设置和定制工作。

> [Emacs Speaks Statistics](https://ess.r-project.org/) (ESS) 的用户会发现，本书中描述的许多工作流程也可以在这里找到。对于那些忠实于 vim 的用户， 我们推荐使用 [Nvim-R plugin](#0).

devtools 和 RStudio 一起将您与软件包构建过程中的底层细节隔离开来。当你开始开发更多软件包时，我们强烈建议你了解更多这些细节。要了解软件包开发的官方细节，最好的资源始终是官方编写的《[R 扩展手册](https://cran.r-project.org/doc/manuals/R-exts.html#Creating-R-packages)》 以及它的 [quarto 版本](https://rstudio.github.io/r-manuals/r-exts/Function-and-variable-index.html)。不过，如果你不熟悉软件包的基础知识，这本手册可能很难理解。这本手册也很详尽，涵盖了所有可能的软件包组件，而不是像本书那样只关注最常见、最有用的组件。如果你已经掌握了基础知识，并想了解 R 引擎盖下发生了什么，那么《 [R 扩展手册](https://cran.r-project.org/doc/manuals/R-exts.html#Creating-R-packages)》将是一个有用的资源。

### 本书的内容

本书的第一部分将为你提供开始软件包开发旅程所需的所有工具，我们强烈建议你按顺序阅读。在**第 1 章**中，我们首先介绍了一个小型软件包的完整开发过程。在详细介绍 R 软件包的关键组件之前，我们将先描绘全貌并提出工作流程建议。在**第 2 章**中，你将学习如何为软件包开发准备系统；在**第 3 章**中，你将学习软件包的基本结构，以及不同状态下的结构差异。接下来，在**第 4 章**中，我们将介绍软件包开发人员经常遇到的核心工作流程。本书的第一部分以另一个案例研究（**第 5 章**）结束，这次的重点是如何将脚本转换为软件包，并讨论在转换过程中会遇到的挑战。

本书其余部分可根据需要阅读。在开发过程中遇到不同主题时，可以在各章之间进行选择。

首先，我们介绍软件包的关键组件：**第 6 章**讨论代码的存放位置以及如何组织代码，**第 7 章**介绍如何在软件包中包含数据，**第 8 章**涉及一些不太重要的文件和目录，这些都是需要讨论的内容。

接下来，我们将深入研究软件包元数据，从**第 9 章**中的 "描述"（DESCRIPTION）开始。然后，我们将深入探讨依赖关系。在**第 10 章**中，我们将介绍采用依赖关系的成本和收益，并提供一些有关软件包命名空间和搜索路径的技术背景。在**第 11 章**中，我们将重点讨论实际问题，例如如何在软件包的不同部分使用不同类型的依赖关系。这也是我们讨论导出函数的地方，因为导出函数可以让其他软件包和项目依赖于你的软件包。最后，我们将在**第 12 章**讨论许可问题。

为了确保你的软件包能按设计运行（并在你进行修改时继续运行），测试你的代码是必不可少的，因此接下来的三章将介绍测试的艺术和科学。**第 13 章**让你开始使用 `testthat` 软件包进行基础测试。**第 14 章**教你如何以最有效的方式设计和组织测试。最后，我们将在**第 15 章**中结束测试的讲解，该章将教你高级技能，以应对具有挑战性的情况。

如果你想让其他人（包括未来的你！）了解如何使用你的软件包中的函数，你就需要记录它们。**第 16 章**让你开始使用 `roxygen2` 来记录软件包中的函数。只有当你知道要查找什么函数时，函数文档才会有帮助，所以接下来的**第 17 章**我们将讨论 `vignettes`，它可以帮助你将软件包作为一个整体进行文档记录。最后，我们将在**第 18 章**讨论其他重要的标记文件，如 `README.md` 和 `NEWS.md`，并在**第 19 章**使用 `pkgdown` 创建软件包网站。

最后，本书将重新审视开发实践，例如使用版本控制和持续集成的好处（**第 20 章**）。最后，我们将讨论软件包的生命周期（**第 21 章**），包括在 CRAN 上发布软件包（**第 22 章**）。

要学的东西很多，但不要感到不知所措。从有用功能的最小子集开始（例如，仅仅是一个 `R/` 目录！），然后逐步积累。套用禅宗僧侣 Shunryu Suzuki 的一句话 "***Each package is perfect the way it is - and it can use a little improvement***".

### 本书不包含的内容

还有一些特定的做法，我们在这里几乎没有涉及，原因很简单，因为我们使用得还不够多，没有什么特别的见解。这是否意味着我们不鼓励这些做法呢？也许不是，因为我们会尽量明确地告诉你我们认为你应该避免的做法。因此，如果这里没有涵盖某些内容，那只是意味着有几百个大量使用的 R 软件包在构建时并没有对该技术进行有意义的依赖。这应该促使你评估一下，你的开发需求与我们的需求真正不重叠的可能性有多大。但有时答案显然是 "是"，在这种情况下，您只需参考其他资源即可。
